rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        match /{document=**} {


            // group collection query
            match /posts/{postId} {
                allow read;
            }

            match /users/{userId} {
                // anyone can read userData like their username, photoURL and displayName\
                allow read;
                //can only create if valid user : see isValidUser()
                allow create: if isValidUser(userId);
            }


            match /usernames/{username} {

                // anyone can read the username doc 
                allow read;
                // can only create if valid username : see isValidUsername()
                allow create: if isValidUsername(username)
            }


            match /users/{userId}/posts/{postId} {
                allow read;
                allow create: if canCreatePost(userId);
                allow update: if canUpdatePost(userId) || canIncrementHearts(userId, postId);
                allow delete: if request.auth.uid == userId
            }


            match /users/{userId}/posts/{postId}/hearts/{heartId} {
                allow read;
                allow write: if request.auth.uid == heartId;

            }


            function canIncrementHearts(userId, postId) {

                let hasValidFields = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['heartCount']);
                let currentUser = request.auth.uid;
                let heartDocExistsAfter = existsAfter(/databases/$(database)/documents/users/$(userId)/posts/$(postId)/hearts/$(heartId));
                let heartDocExists = exists(/databases/$(database)/documents/users/$(userId)/posts/$(postId)/hearts/$(heartId));


                let heartDocAdded = !heartDocExists && heartDocExistsAfter;
                let heartDocRemoved = heartDocExists && !heartDocExistsAfter;


                let heartCountChange = request.resource.data.heartCount - resource.data.heartCount;
                let isValidChange = heartCountChange == 1 || heartCountChange == -1;


                return hasValidFields && isValidChange && (heartCountChange == 1 ? heartDocAdded : heartDocRemoved);

            }


            function canUpdatePost(userId) {
                let isOwner = request.auth.uid == userId;
                let isNow = request.time == request.resource.data.updatedAt;
                let isValidContent = request.resource.data.content.size() < 2000;
                let doesNotUpdateForbidden = !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'username', 'heartCount']);

                return isOwner && isNow && isValidContent && doesNotUpdateForbidden;

            }   


            function isValidUser(userId) {

                // check if the request to create the a doc with the name 'userId' is coming from the same authenticated userId in firebase auth object.
                let isOwner = request.auth.uid == userId;
                // get the username from the request to create a user doc
                let username = request.resource.data.username;
                // check if a doc was created under the username collection with the same username in the request data.
                let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));

                return isOwner && createdValidUsername;

            }



            function canCreatePost(userId) {
                let isOwner = request.auth.uid == userId;
                let isNow = request.time == request.resource.data.createdAt;
                let isValidContent = request.resource.data.content.size() < 2000 && request.resource.data.heartCount == 0;
                let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
                let usernameMatches = username == request.resource.data.username;
                
                return isOwner && isNow && isValidContent && usernameMatches;
            }

            function isValidUsername(username) {
                // can only create a username doc if the request uid matches the 
                let isOwner = request.auth.uid == request.resource.data.uid;
                let isValidLength = username.size() >= 3 && username.size() <= 15;
                let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;


                return isOwner && isValidLength && isValidUserDoc;
            }
        }
 
    }
}

